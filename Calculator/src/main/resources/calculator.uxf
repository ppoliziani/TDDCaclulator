<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1148</x>
      <y>917</y>
      <w>147</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>bg=orange
&lt;&lt;enumeration&gt;&gt;
_calculator::Type_
Valid input types for 
the calculator stack.
--
STRING
NUMBER
SYMBOL
INVALID</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>784</x>
      <y>917</y>
      <w>147</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>bg=orange
&lt;&lt;enumeration&gt;&gt;
_calculator::Symbol_
Symbols used for arithmetic and 
their associated character.
--
PLUS
MINUS
TIMES
DIVIE
LEFT_BRACKET
RIGHT_BRAKCET
INVALID</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>833</y>
      <w>175</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>bg=orange
_calculator::Entry_
Objects created to store numeric 
values, symbols or strings.
--
*Attributes*
-str: String
-number: float
-symbol: Symbol
-type: Type
--
*Responsibilities*
&lt;&lt;constructor&gt;&gt; Entry(float value)
&lt;&lt;constructor&gt;&gt; Entry(Symbol which)
+getString(): String 
          {Exception = BadType}
+getValue(): float
          {Exception = BadType}
+getSymbol(): Symbol 
          {Exception = BadType}
+getType(): Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1071</x>
      <y>448</y>
      <w>175</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>bg=pink
_calculator:: OpStack_
Operator Stack facade for 
the stack class.
--
*Attributes*
numstack: Stack
--
*Responsibilities*
+push(i: Symbol)
+pop(): Symbol
       {Exception: BadType}
+top(): Symbol
       {Exception: BadType}
+isEmpty: boolean
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>847</x>
      <y>861</y>
      <w>119</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1120</x>
      <y>861</y>
      <w>112</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>273</y>
      <w>175</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>bg=yellow
&lt;&lt;interface&gt;&gt;
_calculator:: CalculatorInterface_
Interface for both calculators.
--
*Responsibilities*
+evaluate(what: String): float
       {Exception = InvalidExpression}
       {Exception = BadType}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>826</x>
      <y>448</y>
      <w>175</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>bg=pink
_calculator:: NumStack_
Number Stack facade for 
the stack class.
--
*Attributes*
numstack: Stack
--
*Responsibilities*
+push(i: float)
+pop(): float
       {Exception: BadType}
+isEmpty: boolean
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>644</y>
      <w>175</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>bg=pink
_calculator:: Stack_
Stack of Entry objects.
--
*Attributes*
stackArray: ArrayList&lt;Entry&gt;
--
*Responsibilities*
+size(): int
+top(): Entry
       {Exception = EmptyStack}
+push(value: Entry)
+pop(): Entry
       {Exception = EmptyStack}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>728</x>
      <y>238</y>
      <w>175</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>bg=yellow
_calculator:: RevPolishCalc_
Reverse Polish calculator.
--
*Attributes*
revStack: NumStack
--
*Responsibilities*
+evaluate(what: String): float
       {Exception = InvalidExpression}
       {Exception = BadType}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1176</x>
      <y>238</y>
      <w>175</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>bg=yellow
_calculator:: StandardCalc_
Standard Calculator that uses 
the shunting yard algorithm to 
convert infix to post-fix expressions.
--
*Attributes*
opStack: OpStack
rpCalc: RevPolishCalc
--
*Responsibilities*
+getPrecedence(sym: Symbol): int
+evaluate(what: String): float
       {Exception = InvalidExpression}
       {Exception = BadType}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1029</x>
      <y>777</y>
      <w>21</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>903</x>
      <y>595</y>
      <w>63</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1120</x>
      <y>595</y>
      <w>56</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>805</x>
      <y>385</y>
      <w>35</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;30.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1239</x>
      <y>385</y>
      <w>35</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1120</x>
      <y>301</y>
      <w>70</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>896</x>
      <y>301</y>
      <w>70</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>952</x>
      <y>0</y>
      <w>175</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>bg=red
_calculator:: CaclModel_
State design pattern for switching 
between calculator models.
--
*Attributes*
_revCalc: CalculatorInterface_
_standCalc: CalculatorInterface_
_current: CalculatorInterface_
--
*Responsibilities*
+evaluate(expression: String): float
       {Exception = InvalidExpression}
       {Exception = BadType}
+setInfix(infix: boolean)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1120</x>
      <y>147</y>
      <w>70</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>896</x>
      <y>147</y>
      <w>70</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>336</x>
      <y>0</y>
      <w>238</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>bg=blue
_calculator:: CalcController_
Observer controller class for the calculator, 
is notified when a change in state occurs and 
executes the corresponding methods.
--
*Attributes*
view: ViewInterface
mode: CalcModel
--
*Responsibilities*
&lt;&lt;constructor&gt;&gt; CalcController(newView: ViewInterface)
+calculate()
       {Exception = InvalidExpression}
       {Exception = BadType)
+reverseType()
+infixType()


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>364</x>
      <y>252</y>
      <w>175</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>bg=green
&lt;&lt;interface&gt;&gt;
_calculator:: ViewInterface_
Interface for both calculator views.
--
*Responsibilities*
+getExpression(): String
+setAnswer(ans: float)
+addCalcObserver(f: Observer)
+addReverseObserver(f: Observer)
+addInfixObserver(f: Observer)
+menu()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>371</x>
      <y>420</y>
      <w>168</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>bg=green
&lt;&lt;functional interface&gt;&gt;
_calculator:: Observer_
Functional Interface defining notify 
method to call observers.
--
*Responsibilities*
+notifyObservers()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>49</x>
      <y>147</y>
      <w>203</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>bg=red
_calculator:: Main_
Main driver class that gets the views 
and passes them to CalcController objects.
--
*Responsibilities*
+main()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>189</x>
      <y>539</y>
      <w>175</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>bg=green
_calculator:: AsciiView_
A command line based view.
--
*Attributes*
expression: String
calculator: Observer
reverse: Observer
infix: Observer
--
*Responsibilities*
+getExpression(): String
+setAnswer(ans: float)
+addCalcObserver(f: Observer)
+addReverseObserver(f: Observer)
+addInfixObserver(f: Observer)
+menu()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>273</x>
      <y>378</y>
      <w>105</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>532</x>
      <y>378</y>
      <w>133</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>245</x>
      <y>70</y>
      <w>105</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>245</x>
      <y>217</y>
      <w>133</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>170.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>567</x>
      <y>70</y>
      <w>399</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>550.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>329</x>
      <y>462</y>
      <w>56</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;110.0;60.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>532</x>
      <y>448</y>
      <w>63</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>70.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>441</x>
      <y>168</y>
      <w>21</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>490</x>
      <y>182</y>
      <w>91</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>Observer Design Pattern.
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>882</x>
      <y>91</y>
      <w>70</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>State Design Pattern.
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>546</x>
      <y>532</y>
      <w>231</w>
      <h>273</h>
    </coordinates>
    <panel_attributes>bg=green
_calculator:: MyView_
A Graphical based view with: An expression box,
a result box, a calculate button and 2 radio 
buttons switching between postfix/infix.
--
*Attributes*
expressionBox: TextField
expressionTitle: Label
resultTitle: Label
revButton: RadioButton
infixButton: RadioButton
calculateButton: Button
_instance: MyView_

--
*Responsibilities*
+initialize()
+getInstance()
+start(primaryStage Stage)
+menu()
+getExpression(): String
+setAnswer(ans: float)
+addCalcObserver(f: Observer)
+addReverseObserver(f: Observer)
+addInfixObserver(f: Observer)

</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
